// Code your testbench here
// or browse Examples
class sample;
  rand bit[31:0]x;
  constraint c1{
    x inside{[20:35]};}
endclass
module top;
  sample s;
  initial begin
    s=new();
    repeat(10) begin
      assert(s.randomize());
      $display("x=%0d",s.x);
    end
  end
endmodule
OUTPUT:
# KERNEL: x=24
# KERNEL: x=24
# KERNEL: x=34
# KERNEL: x=32
# KERNEL: x=23
# KERNEL: x=26
# KERNEL: x=35
# KERNEL: x=30
# KERNEL: x=27
# KERNEL: x=35

USAGE OF INSIDE CONSTRAINT:

// Code your testbench here
// or browse Examples
`define starting_range 60
`define ending_range 80
class sample #(parameter int p1=90,int p2=110);
  rand int a;
  rand int b;
  rand int c;
  rand int d;
  rand int e;
  constraint c1{a inside { [10:20]};}
  constraint c2{b inside { 10,20};}
  constraint c3{c inside {[10:20],30,40};}
  constraint c4{d inside {[`starting_range:`ending_range]};}
  constraint c5{e inside {[p1:p2]};}
endclass
module tb;
  sample s;
  initial begin
    s=new();
    repeat(5) begin
      assert(s.randomize());
      $display("a=%0d,b=%0d,c=%0d,d=%0d,e=%0d",s.a,s.b,s.c,s.d,s.e);
    end
  end
endmodule
OUTPUT:
# KERNEL: a=17,b=10,c=30,d=76,e=109
# KERNEL: a=19,b=10,c=18,d=74,e=110
# KERNEL: a=19,b=20,c=40,d=61,e=109
# KERNEL: a=13,b=20,c=16,d=73,e=109
# KERNEL: a=12,b=20,c=13,d=79,e=98


Distributive constraint

// Code your testbench here
// or browse Examples
class sample ;
  rand int a;
  constraint cd{ a dist{[100:290]:/2,[350:1000]:/3,[1500:2500]:/5};}
                    or
//////constraint cd{ a dist{200:=2,400:=3,600:=5};}
endclass
module tb;
  sample s;
  initial begin
    s=new();
    repeat(10) begin
      assert(s.randomize());
      $display("a=%0d",s.a);
    end
  end
endmodule

OUTPUT:
# KERNEL: a=184
# KERNEL: a=937
# KERNEL: a=992
# KERNEL: a=994
# KERNEL: a=2108
# KERNEL: a=161
# KERNEL: a=1653
# KERNEL: a=152
# KERNEL: a=2432


// Code your testbench here
// or browse Examples
class sample;
  rand bit [7:0]arr_d[];
  constraint cu{unique{arr_d}; arr_d.size==10;}
endclass
module tb;
  sample s; 2
  integer i;
  initial begin
    s=new();
    assert(s.randomize());
    foreach (s.arr_d[i])
      $display("arr[%0d]=%0d",i,s.arr_d[i]);
  end
endmodule
//for any kind of arrays whenever we need randomized unique values we use unique constraint.
