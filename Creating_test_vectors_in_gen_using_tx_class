// Code your testbench here
// or browse Examples
class apb_tx;
//Properties of the class
  bit wr_rd=1;
  rand bit [7:0]addr;
  rand bit [31:0]data;
  rand bit [3:0]sel; //There is a possibility of 16 slaves to select because 2^4=16;
  //Methods of the class i.e Functions are tasks
  function  void print(string thub);
    $display("[%0s] wr_rd=%0b addr=%0h  data=%0h  sel=%0b",thub,wr_rd,addr,data,sel);
  endfunction
  //Constriants is nothing but a rule/restriction
  constraint sel_c{
    sel inside{4'b0010 ,4'b0011 ,4'b0100,4'b1000,4'b1001};
  }
endclass

class apb_gen;
  apb_tx tx;
  mailbox mbx;
  task run();
    repeat(5) begin
      tx=new();
      tx.randomize();
      tx.print("apb_gen");
      mbx.put(tx); 
    end
  endtask
endclass

class apb_bfm;
  apb_tx tx;
  mailbox mbx;
  task run();
    repeat(5) begin
      mbx.get(tx);
      tx.print("apb_bfm");
    end
    
  endtask
endclass
module top;
  mailbox mbx;
  apb_gen gen;
  apb_bfm bfm;
  initial begin
    mbx=new();
    gen=new();
    bfm=new();
    gen.mbx=mbx;
    bfm.mbx=mbx;
    fork
      gen.run();
      bfm.run();
    join
  end 
endmodule
