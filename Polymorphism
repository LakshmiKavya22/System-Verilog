POLYMORPHISM WITHOUT VIRTUAL KEYWORD:

// Code your testbench here
// or browse Examples
//Alwa
class remote;
  function void presspower();
    $display("Default:No devicde is selected");
  endfunction
endclass
class fan extends remote;
  function void presspower();
    $display("Fan : on /off");
  endfunction 
endclass
class ac extends remote;
  function void presspower();
    $display("Ac : on /off");
  endfunction 
endclass
class light extends remote;
  function void presspower();
    $display("light : on /off");
  endfunction 
endclass

module tb;
  remote device[3];
  initial begin
    //polymorphism
    //Base class handle=child class
    device[0]=fan::new();
    device[1]=ac::new();
    device[2]=light::new();
    foreach(device[i])
      device[i].presspower();
  end
endmodule
OUTPUT:
# KERNEL: Default:No devicde is selected
# KERNEL: Default:No devicde is selected
# KERNEL: Default:No devicde is selected

****Without Virtual keyword Base class handle points to the same base class.


WITH VIRTUAL KEYWORD

// Code your testbench here
// or browse Examples
class remote;
  virtual function void presspower();
    $display("Default:No devicde is selected");
  endfunction
endclass
class fan extends remote;
  function void presspower();
    $display("Fan : on /off");
  endfunction 
endclass
class ac extends remote;
  function void presspower();
    $display("Ac : on /off");
  endfunction 
endclass
class light extends remote;
  function void presspower();
    $display("light : on /off");
  endfunction 
endclass

module tb;
  remote device[3];
  initial begin
    //polymorphism
    //Base class handle=child class
    device[0]=fan::new();
    device[1]=ac::new();
    device[2]=light::new();
    foreach(device[i])
      device[i].presspower();
  end
endmodule
OUTPUT:
# KERNEL: Fan : on /off
# KERNEL: Ac : on /off
# KERNEL: light : on /off
****With virtual keyword Polymorphism is completed ,the base class handle pointing towards child class.
